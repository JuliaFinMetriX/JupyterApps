{
 "metadata": {
  "celltoolbar": "Slideshow",
  "language": "Julia",
  "name": "",
  "signature": "sha256:89c6ec38eb370ff25536a6899afc070cb7847b3490bae1edb4fec5dbdab3ee7a"
 },
 "nbformat": 3,
 "nbformat_minor": 0,
 "worksheets": [
  {
   "cells": [
    {
     "cell_type": "heading",
     "level": 2,
     "metadata": {
      "slideshow": {
       "slide_type": "slide"
      }
     },
     "source": [
      "Motivation"
     ]
    },
    {
     "cell_type": "markdown",
     "metadata": {
      "slideshow": {
       "slide_type": "-"
      }
     },
     "source": [
      "This IJulia notebook is a **list of nice tweaks** of the Julia language. Features should roughly be listed with **ascending importance**. \n",
      "\n",
      "**How does your favorite technical computing language compare to this?**"
     ]
    },
    {
     "cell_type": "heading",
     "level": 2,
     "metadata": {
      "slideshow": {
       "slide_type": "slide"
      }
     },
     "source": [
      "Unicode characters"
     ]
    },
    {
     "cell_type": "markdown",
     "metadata": {
      "slideshow": {
       "slide_type": "-"
      }
     },
     "source": [
      "When using variable names, you have the full range of **special characters** at your disposal."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "\u03b1 = 3.4\n",
      "print(\u03b1)\n",
      "pi"
     ],
     "language": "python",
     "metadata": {
      "slideshow": {
       "slide_type": "-"
      }
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "3."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "4"
       ]
      },
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 1,
       "text": [
        "\u03c0 = 3.1415926535897..."
       ]
      }
     ],
     "prompt_number": 1
    },
    {
     "cell_type": "heading",
     "level": 2,
     "metadata": {
      "slideshow": {
       "slide_type": "slide"
      }
     },
     "source": [
      "Scalar multiplication"
     ]
    },
    {
     "cell_type": "markdown",
     "metadata": {
      "slideshow": {
       "slide_type": "-"
      }
     },
     "source": [
      "When multiplying variables with scalar values, computer code allows the same abbreviation that is used in common **mathematical notation**."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "f = x -> 3x^3 + 8x^2 - 3x\n",
      "f(3)"
     ],
     "language": "python",
     "metadata": {
      "slideshow": {
       "slide_type": "-"
      }
     },
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 2,
       "text": [
        "144"
       ]
      }
     ],
     "prompt_number": 2
    },
    {
     "cell_type": "heading",
     "level": 2,
     "metadata": {
      "slideshow": {
       "slide_type": "slide"
      }
     },
     "source": [
      "Chaining comparisons"
     ]
    },
    {
     "cell_type": "markdown",
     "metadata": {
      "slideshow": {
       "slide_type": "-"
      }
     },
     "source": [
      "**Multiple comparisons** can be **simultaneously** checked in one line."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "vals = rand(40)\n",
      "\n",
      "intermediate = 0.2 .<= vals .<= 0.6\n",
      "vals[intermediate]"
     ],
     "language": "python",
     "metadata": {
      "slideshow": {
       "slide_type": "-"
      }
     },
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 3,
       "text": [
        "11-element Array{Float64,1}:\n",
        " 0.203511\n",
        " 0.322129\n",
        " 0.312522\n",
        " 0.5667  \n",
        " 0.47992 \n",
        " 0.43699 \n",
        " 0.472091\n",
        " 0.50144 \n",
        " 0.257582\n",
        " 0.224464\n",
        " 0.283126"
       ]
      }
     ],
     "prompt_number": 3
    },
    {
     "cell_type": "heading",
     "level": 2,
     "metadata": {
      "slideshow": {
       "slide_type": "slide"
      }
     },
     "source": [
      "Pipes"
     ]
    },
    {
     "cell_type": "markdown",
     "metadata": {
      "slideshow": {
       "slide_type": "-"
      }
     },
     "source": [
      "To avoid cluttering your workspace, **successive operations** on an input can also be written as a **pipe** similar to linux shell commands."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "a = rand(400)\n",
      "\n",
      "# manually compute standard deviation of b\n",
      "b = exp(a)\n",
      "mu = mean(b)\n",
      "centralized = b - mu\n",
      "std = mean(centralized.^2)"
     ],
     "language": "python",
     "metadata": {
      "slideshow": {
       "slide_type": "-"
      }
     },
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 4,
       "text": [
        "0.2247054258253064"
       ]
      }
     ],
     "prompt_number": 4
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# written with pipe\n",
      "std = a |>\n",
      "    exp |>\n",
      "    x -> x - mean(x) |>\n",
      "    x -> x.^2 |>\n",
      "    mean\n"
     ],
     "language": "python",
     "metadata": {
      "slideshow": {
       "slide_type": "subslide"
      }
     },
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 5,
       "text": [
        "0.2247054258253064"
       ]
      }
     ],
     "prompt_number": 5
    },
    {
     "cell_type": "heading",
     "level": 2,
     "metadata": {
      "slideshow": {
       "slide_type": "slide"
      }
     },
     "source": [
      "String interpolation"
     ]
    },
    {
     "cell_type": "markdown",
     "metadata": {
      "slideshow": {
       "slide_type": "-"
      }
     },
     "source": [
      "Variable values can easily be incorporated into a string."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "fileName = \"data.csv\"\n",
      "println(\"The values are stored in $fileName\")"
     ],
     "language": "python",
     "metadata": {
      "slideshow": {
       "slide_type": "-"
      }
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "The values are stored in data.csv"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      }
     ],
     "prompt_number": 6
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "a = [1; 2; 3]\n",
      "println(\"The values of a are: $a\")"
     ],
     "language": "python",
     "metadata": {
      "slideshow": {
       "slide_type": "fragment"
      }
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "The values of a are: [1,2,3]\n"
       ]
      }
     ],
     "prompt_number": 7
    },
    {
     "cell_type": "heading",
     "level": 2,
     "metadata": {
      "slideshow": {
       "slide_type": "slide"
      }
     },
     "source": [
      "Ternary operators"
     ]
    },
    {
     "cell_type": "markdown",
     "metadata": {
      "slideshow": {
       "slide_type": "-"
      }
     },
     "source": [
      "Ternary operators are an abbreviation for **if ... else ... end** expressions. The expression before \"?\" is the condition expression, and the ternary operation evaluates the expression before the \":\" if the condition is true, or the expression after the \":\" if it is false."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "kk = 4\n",
      "if kk > 3\n",
      "    println(\"greater than 3\")\n",
      "else\n",
      "    println(\"smaller than 3\")\n",
      "end"
     ],
     "language": "python",
     "metadata": {
      "slideshow": {
       "slide_type": "-"
      }
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "greater than 3\n"
       ]
      }
     ],
     "prompt_number": 8
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "kk > 3 ? println(\"greater than 3\") : println(\"smaller than 3\")"
     ],
     "language": "python",
     "metadata": {
      "slideshow": {
       "slide_type": "fragment"
      }
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "greater than 3\n"
       ]
      }
     ],
     "prompt_number": 9
    },
    {
     "cell_type": "heading",
     "level": 2,
     "metadata": {
      "slideshow": {
       "slide_type": "slide"
      }
     },
     "source": [
      "Iterators"
     ]
    },
    {
     "cell_type": "markdown",
     "metadata": {
      "slideshow": {
       "slide_type": "-"
      }
     },
     "source": [
      "**Iteration** over all entries of a variable can be done **without** manual **indexing**."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "a = [1; 2; 3]\n",
      "for ii=1:length(a)\n",
      "    print(a[ii], \", \")\n",
      "end"
     ],
     "language": "python",
     "metadata": {
      "slideshow": {
       "slide_type": "-"
      }
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "1"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", 2, 3, "
       ]
      }
     ],
     "prompt_number": 10
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "for entry in a\n",
      "    print(entry, \", \")\n",
      "end"
     ],
     "language": "python",
     "metadata": {
      "slideshow": {
       "slide_type": "fragment"
      }
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "1, 2, 3, "
       ]
      }
     ],
     "prompt_number": 11
    },
    {
     "cell_type": "heading",
     "level": 2,
     "metadata": {
      "slideshow": {
       "slide_type": "slide"
      }
     },
     "source": [
      "Multiple simultaneous assignments"
     ]
    },
    {
     "cell_type": "markdown",
     "metadata": {
      "slideshow": {
       "slide_type": "-"
      }
     },
     "source": [
      "Values of a tuple or array can be **simultaneously** be **assigned** to individual variables."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "a = rand(10, 2)\n",
      "(nRows, nCol) = size(a)\n",
      "nRows\n"
     ],
     "language": "python",
     "metadata": {
      "slideshow": {
       "slide_type": "-"
      }
     },
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 12,
       "text": [
        "10"
       ]
      }
     ],
     "prompt_number": 12
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "(mu1, mu2) = mean(a, 1)\n",
      "mu1"
     ],
     "language": "python",
     "metadata": {
      "slideshow": {
       "slide_type": "fragment"
      }
     },
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 13,
       "text": [
        "0.5857136093881781"
       ]
      }
     ],
     "prompt_number": 13
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "mu2"
     ],
     "language": "python",
     "metadata": {
      "slideshow": {
       "slide_type": "fragment"
      }
     },
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 14,
       "text": [
        "0.45706421894673904"
       ]
      }
     ],
     "prompt_number": 14
    },
    {
     "cell_type": "heading",
     "level": 2,
     "metadata": {
      "slideshow": {
       "slide_type": "slide"
      }
     },
     "source": [
      "Comprehensions"
     ]
    },
    {
     "cell_type": "markdown",
     "metadata": {
      "slideshow": {
       "slide_type": "-"
      }
     },
     "source": [
      "Comprehension is an easy way to **create arrays** where individual entries follow some structure."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "a = [1:10]"
     ],
     "language": "python",
     "metadata": {
      "slideshow": {
       "slide_type": "-"
      }
     },
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 15,
       "text": [
        "10-element Array{Int64,1}:\n",
        "  1\n",
        "  2\n",
        "  3\n",
        "  4\n",
        "  5\n",
        "  6\n",
        "  7\n",
        "  8\n",
        "  9\n",
        " 10"
       ]
      }
     ],
     "prompt_number": 15
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "a = [ii for ii=1:10]"
     ],
     "language": "python",
     "metadata": {
      "slideshow": {
       "slide_type": "subslide"
      }
     },
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 16,
       "text": [
        "10-element Array{Int64,1}:\n",
        "  1\n",
        "  2\n",
        "  3\n",
        "  4\n",
        "  5\n",
        "  6\n",
        "  7\n",
        "  8\n",
        "  9\n",
        " 10"
       ]
      }
     ],
     "prompt_number": 16
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "a = [exp(ii)+2 for ii=1:10]"
     ],
     "language": "python",
     "metadata": {
      "slideshow": {
       "slide_type": "subslide"
      }
     },
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 17,
       "text": [
        "10-element Array{Float64,1}:\n",
        "     4.71828\n",
        "     9.38906\n",
        "    22.0855 \n",
        "    56.5982 \n",
        "   150.413  \n",
        "   405.429  \n",
        "  1098.63   \n",
        "  2982.96   \n",
        "  8105.08   \n",
        " 22028.5    "
       ]
      }
     ],
     "prompt_number": 17
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "a = [ii for ii=1:10, jj=1:10]\n",
      "b = [jj for ii=1:10, jj=1:10]\n",
      "(a, b)"
     ],
     "language": "python",
     "metadata": {
      "slideshow": {
       "slide_type": "subslide"
      }
     },
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 18,
       "text": [
        "(\n",
        "10x10 Array{Int64,2}:\n",
        "  1   1   1   1   1   1   1   1   1   1\n",
        "  2   2   2   2   2   2   2   2   2   2\n",
        "  3   3   3   3   3   3   3   3   3   3\n",
        "  4   4   4   4   4   4   4   4   4   4\n",
        "  5   5   5   5   5   5   5   5   5   5\n",
        "  6   6   6   6   6   6   6   6   6   6\n",
        "  7   7   7   7   7   7   7   7   7   7\n",
        "  8   8   8   8   8   8   8   8   8   8\n",
        "  9   9   9   9   9   9   9   9   9   9\n",
        " 10  10  10  10  10  10  10  10  10  10,\n",
        "\n",
        "10x10 Array{Int64,2}:\n",
        " 1  2  3  4  5  6  7  8  9  10\n",
        " 1  2  3  4  5  6  7  8  9  10\n",
        " 1  2  3  4  5  6  7  8  9  10\n",
        " 1  2  3  4  5  6  7  8  9  10\n",
        " 1  2  3  4  5  6  7  8  9  10\n",
        " 1  2  3  4  5  6  7  8  9  10\n",
        " 1  2  3  4  5  6  7  8  9  10\n",
        " 1  2  3  4  5  6  7  8  9  10\n",
        " 1  2  3  4  5  6  7  8  9  10\n",
        " 1  2  3  4  5  6  7  8  9  10)"
       ]
      }
     ],
     "prompt_number": 18
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "using Datetime\n",
      "dats = [date(2012, 4, ii) for ii=1:10]"
     ],
     "language": "python",
     "metadata": {
      "slideshow": {
       "slide_type": "subslide"
      }
     },
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 19,
       "text": [
        "10-element Array{Date{C<:Calendar},1}:\n",
        " 2012-04-01\n",
        " 2012-04-02\n",
        " 2012-04-03\n",
        " 2012-04-04\n",
        " 2012-04-05\n",
        " 2012-04-06\n",
        " 2012-04-07\n",
        " 2012-04-08\n",
        " 2012-04-09\n",
        " 2012-04-10"
       ]
      }
     ],
     "prompt_number": 19
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "whichYear = [year(dt) for dt in dats]"
     ],
     "language": "python",
     "metadata": {
      "slideshow": {
       "slide_type": "subslide"
      }
     },
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 20,
       "text": [
        "10-element Array{Any,1}:\n",
        " 2012\n",
        " 2012\n",
        " 2012\n",
        " 2012\n",
        " 2012\n",
        " 2012\n",
        " 2012\n",
        " 2012\n",
        " 2012\n",
        " 2012"
       ]
      }
     ],
     "prompt_number": 20
    },
    {
     "cell_type": "heading",
     "level": 2,
     "metadata": {
      "slideshow": {
       "slide_type": "slide"
      }
     },
     "source": [
      "Square bracket indexing"
     ]
    },
    {
     "cell_type": "markdown",
     "metadata": {
      "slideshow": {
       "slide_type": "-"
      }
     },
     "source": [
      "The syntax for **indexing** of variables makes use of with **square brackets**. This way, **functions and variables** can immediately **be distinguished** at first sight. Some languages - Matlab, for example - do not share this property."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "a[2]"
     ],
     "language": "python",
     "metadata": {
      "slideshow": {
       "slide_type": "-"
      }
     },
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 21,
       "text": [
        "2"
       ]
      }
     ],
     "prompt_number": 21
    },
    {
     "cell_type": "heading",
     "level": 2,
     "metadata": {
      "slideshow": {
       "slide_type": "slide"
      }
     },
     "source": [
      "Inline function definitions"
     ]
    },
    {
     "cell_type": "markdown",
     "metadata": {
      "slideshow": {
       "slide_type": "-"
      }
     },
     "source": [
      "**Functions** can be **defined anywhere** in the file, and need not reside in a separate file. This allows easy and natural decomposition of **large tasks into separate pieces**."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "function addTwo(x)\n",
      "    y = x + 2\n",
      "    return y\n",
      "end"
     ],
     "language": "python",
     "metadata": {
      "slideshow": {
       "slide_type": "-"
      }
     },
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 22,
       "text": [
        "addTwo (generic function with 1 method)"
       ]
      }
     ],
     "prompt_number": 22
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "addTwo(a[2])"
     ],
     "language": "python",
     "metadata": {
      "slideshow": {
       "slide_type": "-"
      }
     },
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 23,
       "text": [
        "4"
       ]
      }
     ],
     "prompt_number": 23
    },
    {
     "cell_type": "markdown",
     "metadata": {
      "slideshow": {
       "slide_type": "subslide"
      }
     },
     "source": [
      "Like in other languages, functions **naturally extend to vector inputs**."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "addTwo(a)"
     ],
     "language": "python",
     "metadata": {
      "slideshow": {
       "slide_type": "-"
      }
     },
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 24,
       "text": [
        "10x10 Array{Int64,2}:\n",
        "  3   3   3   3   3   3   3   3   3   3\n",
        "  4   4   4   4   4   4   4   4   4   4\n",
        "  5   5   5   5   5   5   5   5   5   5\n",
        "  6   6   6   6   6   6   6   6   6   6\n",
        "  7   7   7   7   7   7   7   7   7   7\n",
        "  8   8   8   8   8   8   8   8   8   8\n",
        "  9   9   9   9   9   9   9   9   9   9\n",
        " 10  10  10  10  10  10  10  10  10  10\n",
        " 11  11  11  11  11  11  11  11  11  11\n",
        " 12  12  12  12  12  12  12  12  12  12"
       ]
      }
     ],
     "prompt_number": 24
    },
    {
     "cell_type": "heading",
     "level": 2,
     "metadata": {
      "slideshow": {
       "slide_type": "slide"
      }
     },
     "source": [
      "Splicing"
     ]
    },
    {
     "cell_type": "markdown",
     "metadata": {
      "slideshow": {
       "slide_type": "-"
      }
     },
     "source": [
      "Splicing function arguments allows seamlessly switching between functions that require **separate arguments** on the one hand, and functions that require **individual arguments combined in one array**."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "function multipleArguments(a, b, c, d, e, f)\n",
      "    return a + b + c + d + e + f\n",
      "end"
     ],
     "language": "python",
     "metadata": {
      "slideshow": {
       "slide_type": "-"
      }
     },
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 25,
       "text": [
        "multipleArguments (generic function with 1 method)"
       ]
      }
     ],
     "prompt_number": 25
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "vals = (1, 2, 3, 4, 5, 6)\n",
      "multipleArguments(vals...)"
     ],
     "language": "python",
     "metadata": {
      "slideshow": {
       "slide_type": "subslide"
      }
     },
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 27,
       "text": [
        "21"
       ]
      }
     ],
     "prompt_number": 27
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "vals = [1:6]\n",
      "multipleArguments(vals...)"
     ],
     "language": "python",
     "metadata": {
      "slideshow": {
       "slide_type": "fragment"
      }
     },
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 26,
       "text": [
        "21"
       ]
      }
     ],
     "prompt_number": 26
    },
    {
     "cell_type": "heading",
     "level": 2,
     "metadata": {
      "slideshow": {
       "slide_type": "slide"
      }
     },
     "source": [
      "Multiple dispatch"
     ]
    },
    {
     "cell_type": "markdown",
     "metadata": {
      "slideshow": {
       "slide_type": "-"
      }
     },
     "source": [
      "**Function behaviour** may vary **depending on** the type of the **arguments**. This way, multiple functions with equal name may co-exist. "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "function reciprocalValue(x::Int)\n",
      "    return 1/x\n",
      "end\n",
      "\n",
      "function reciprocalValue(x::ASCIIString)\n",
      "    return uppercase(x)\n",
      "end\n",
      "\n",
      "function reciprocalValue(x)\n",
      "    println(\"Method only makes sense for numbers and strings\")\n",
      "end"
     ],
     "language": "python",
     "metadata": {
      "slideshow": {
       "slide_type": "-"
      }
     },
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 28,
       "text": [
        "reciprocalValue (generic function with 3 methods)"
       ]
      }
     ],
     "prompt_number": 28
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "reciprocalValue(8)"
     ],
     "language": "python",
     "metadata": {
      "slideshow": {
       "slide_type": "subslide"
      }
     },
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 29,
       "text": [
        "0.125"
       ]
      }
     ],
     "prompt_number": 29
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "reciprocalValue(\"hello\")"
     ],
     "language": "python",
     "metadata": {
      "slideshow": {
       "slide_type": "fragment"
      }
     },
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 30,
       "text": [
        "\"HELLO\""
       ]
      }
     ],
     "prompt_number": 30
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "reciprocalValue(NaN)"
     ],
     "language": "python",
     "metadata": {
      "slideshow": {
       "slide_type": "fragment"
      }
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Method only makes sense for numbers and strings"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      }
     ],
     "prompt_number": 31
    },
    {
     "cell_type": "heading",
     "level": 2,
     "metadata": {
      "slideshow": {
       "slide_type": "slide"
      }
     },
     "source": [
      "Composite types"
     ]
    },
    {
     "cell_type": "markdown",
     "metadata": {
      "slideshow": {
       "slide_type": "-"
      }
     },
     "source": [
      "One can easily define highly customized **own types**. Through multiple dispatch, behaviour of common **mathematical operators** can be **defined for any new type**."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "type simplexPoint\n",
      "    x\n",
      "    y\n",
      "end"
     ],
     "language": "python",
     "metadata": {
      "slideshow": {
       "slide_type": "-"
      }
     },
     "outputs": [],
     "prompt_number": 32
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "sp = simplexPoint(0.4, 0.6)"
     ],
     "language": "python",
     "metadata": {
      "slideshow": {
       "slide_type": "-"
      }
     },
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 33,
       "text": [
        "simplexPoint(0.4,0.6)"
       ]
      }
     ],
     "prompt_number": 33
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "function reciprocalValue(sp::simplexPoint)\n",
      "    return simplexPoint(sp.y, sp.x)\n",
      "end\n",
      "\n",
      "reciprocalValue(sp)"
     ],
     "language": "python",
     "metadata": {
      "slideshow": {
       "slide_type": "subslide"
      }
     },
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 34,
       "text": [
        "simplexPoint(0.6,0.4)"
       ]
      }
     ],
     "prompt_number": 34
    },
    {
     "cell_type": "heading",
     "level": 2,
     "metadata": {
      "slideshow": {
       "slide_type": "slide"
      }
     },
     "source": [
      "Macros"
     ]
    },
    {
     "cell_type": "markdown",
     "metadata": {
      "slideshow": {
       "slide_type": "-"
      }
     },
     "source": [
      "Julia comes with quite powerful **metaprogramming skills**. This allows you to work with both the values that are stored in the variables and the names of variables and functions that were used in the call. This way, you can **take some code, manipulate it, and only then you evaluate it**.\n",
      "\n",
      "One example is the **@stoptime macro**. Before the macro evaluates the input, it starts a stopwatch, and it displays the time that was required after the evalution."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "macro stoptime(expr)\n",
      "    quote\n",
      "        hhhh = 3 # some line of nonsense to show variable scope\n",
      "        tic()\n",
      "        $(esc(expr))\n",
      "        toc()\n",
      "    end\n",
      "end"
     ],
     "language": "python",
     "metadata": {
      "slideshow": {
       "slide_type": "-"
      }
     },
     "outputs": [],
     "prompt_number": 35
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "@stoptime repChar = inv(rand(1000, 1000))\n",
      "repChar"
     ],
     "language": "python",
     "metadata": {
      "slideshow": {
       "slide_type": "subslide"
      }
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "elapsed time: "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "0.335180416 seconds\n"
       ]
      },
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 36,
       "text": [
        "1000x1000 Array{Float64,2}:\n",
        "  0.591627    0.217842     0.0637454  \u2026  -0.115837   -0.0450544  -0.111772\n",
        " -0.758712   -0.139523    -0.0994672      0.193427    0.164507    0.475184\n",
        " -0.716014   -0.326471    -0.0645922      0.0246643   0.0153299   0.2766  \n",
        "  0.604814   -0.00456625   0.129376      -0.139168   -0.109638   -0.445314\n",
        "  1.94064     0.634564     0.153518      -0.273973   -0.144182   -1.14719 \n",
        "  0.415053    0.154421     0.0372826  \u2026  -0.0640074  -0.0290496  -0.385379\n",
        "  0.794189    0.143674     0.129896      -0.224082   -0.195351   -0.528428\n",
        " -2.2957     -0.671291    -0.14337        0.606281    0.206227    1.63317 \n",
        "  2.09568     0.774288     0.0920943     -0.306694   -0.0447057  -1.45268 \n",
        " -0.10752    -0.187147    -0.100687      -0.300174   -0.0549395  -0.143137\n",
        " -1.55051    -0.56468     -0.102929   \u2026   0.160798    0.0636525   0.803653\n",
        " -1.45857    -0.458074    -0.15361        0.219926    0.139904    0.851225\n",
        "  2.42651     0.891518     0.153939      -0.306567   -0.140035   -1.31744 \n",
        "  \u22ee                                   \u22f1                                   \n",
        "  2.82847     0.722809     0.194232      -0.605116   -0.324064   -1.58701 \n",
        "  1.2604      0.505416     0.0387772     -0.188163   -0.0434406  -0.719409\n",
        " -2.30271    -0.871136    -0.090162   \u2026   0.337596    0.131885    1.37204 \n",
        " -0.0959754  -0.128131    -0.0457082     -0.179655   -0.0560754   0.125494\n",
        "  0.77366     0.167181     0.0656932     -0.269081   -0.116437   -0.603329\n",
        " -3.04711    -0.959322    -0.329995       0.490991    0.272191    1.858   \n",
        "  1.93503     0.606169     0.212815      -0.384985   -0.163357   -1.17349 \n",
        " -1.42639    -0.5145      -0.174118   \u2026   0.199465    0.142168    0.833775\n",
        "  0.868796    0.133973     0.072335      -0.343067   -0.125228   -0.65966 \n",
        "  2.12826     0.642544     0.130245      -0.422047   -0.231188   -1.20093 \n",
        " -1.00589    -0.334197    -0.0826762      0.174577    0.0821082   0.65296 \n",
        " -1.30071    -0.363529    -0.129832       0.287765    0.139347    0.759803"
       ]
      }
     ],
     "prompt_number": 36
    },
    {
     "cell_type": "markdown",
     "metadata": {
      "slideshow": {
       "slide_type": "subslide"
      }
     },
     "source": [
      "Macros evaluate in a **separate workspace**."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "hhhh"
     ],
     "language": "python",
     "metadata": {
      "slideshow": {
       "slide_type": "-"
      }
     },
     "outputs": [
      {
       "ename": "LoadError",
       "evalue": "hhhh not defined\nwhile loading In[37], in expression starting on line 1",
       "output_type": "pyerr",
       "traceback": [
        "hhhh not defined\nwhile loading In[37], in expression starting on line 1"
       ]
      }
     ],
     "prompt_number": 37
    },
    {
     "cell_type": "markdown",
     "metadata": {
      "slideshow": {
       "slide_type": "subslide"
      }
     },
     "source": [
      "Using the *macroexpand* function one can easily look at the complete code that gets evaluated by the macro."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "macroexpand(:(@stoptime repChar = inv(rand(1000, 1000))))"
     ],
     "language": "python",
     "metadata": {
      "slideshow": {
       "slide_type": "-"
      }
     },
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 38,
       "text": [
        ":(begin  # In[35], line 3:\n",
        "        #344#hhhh = 3 # line 4:\n",
        "        tic() # line 5:\n",
        "        repChar = inv(rand(1000,1000)) # line 6:\n",
        "        toc()\n",
        "    end)"
       ]
      }
     ],
     "prompt_number": 38
    },
    {
     "cell_type": "markdown",
     "metadata": {
      "slideshow": {
       "slide_type": "-"
      }
     },
     "source": [
      "Of course, this stopwatch macro already exists in Julia. It is called @time."
     ]
    },
    {
     "cell_type": "markdown",
     "metadata": {
      "slideshow": {
       "slide_type": "subslide"
      }
     },
     "source": [
      "Another example is the @test macro, which allows extremely convenient testing of code."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "using Base.Test\n",
      "@test 3 == (2+1)"
     ],
     "language": "python",
     "metadata": {
      "slideshow": {
       "slide_type": "-"
      }
     },
     "outputs": [],
     "prompt_number": 39
    },
    {
     "cell_type": "markdown",
     "metadata": {
      "slideshow": {
       "slide_type": "-"
      }
     },
     "source": [
      "As a macro also receives the actual variable names during its call, it can print out the actual call if the test fails."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "kk = 4\n",
      "@test kk == (2+1)"
     ],
     "language": "python",
     "metadata": {
      "slideshow": {
       "slide_type": "fragment"
      }
     },
     "outputs": [
      {
       "ename": "LoadError",
       "evalue": "test failed: kk == 2 + 1\nwhile loading In[40], in expression starting on line 2",
       "output_type": "pyerr",
       "traceback": [
        "test failed: kk == 2 + 1\nwhile loading In[40], in expression starting on line 2",
        " in error at error.jl:21",
        " in default_handler at test.jl:19",
        " in do_test at test.jl:39"
       ]
      }
     ],
     "prompt_number": 40
    },
    {
     "cell_type": "heading",
     "level": 5,
     "metadata": {
      "slideshow": {
       "slide_type": "subslide"
      }
     },
     "source": [
      "Example: squaredVariable"
     ]
    },
    {
     "cell_type": "markdown",
     "metadata": {
      "slideshow": {
       "slide_type": "-"
      }
     },
     "source": [
      "Another example, though not the best style, is the following macro that returns the squared value of any given variable. The value will be stored in a variable that matches the name of the original input variable, but with \"_squared\" appended. Hence, **his macro messes with the current workspace**, which is generally NOT recommended.\n",
      "\n",
      "In this example, however, we explicitly want the code to conduct changes to the workspace that are not directly induced through the expression that is handed over to the macro. The macro uses *eval* to create a new variable with ending \"_squared\" in the workspace."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "macro squaredVariable(a)\n",
      "    println(\"Calculating the squared value of $a:\")\n",
      "    newVariableName = symbol(string(a, \"_squared\"))\n",
      "    eval(:($newVariableName = $a^2))\n",
      "end\n"
     ],
     "language": "python",
     "metadata": {
      "slideshow": {
       "slide_type": "-"
      }
     },
     "outputs": [],
     "prompt_number": 41
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "k = 8\n",
      "@squaredVariable k"
     ],
     "language": "python",
     "metadata": {
      "slideshow": {
       "slide_type": "subslide"
      }
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Calculating the squared value of k:"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 42,
       "text": [
        "64"
       ]
      }
     ],
     "prompt_number": 42
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "k_squared"
     ],
     "language": "python",
     "metadata": {
      "slideshow": {
       "slide_type": "fragment"
      }
     },
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 43,
       "text": [
        "64"
       ]
      }
     ],
     "prompt_number": 43
    },
    {
     "cell_type": "heading",
     "level": 2,
     "metadata": {
      "slideshow": {
       "slide_type": "slide"
      }
     },
     "source": [
      "Metaprogramming"
     ]
    },
    {
     "cell_type": "markdown",
     "metadata": {
      "slideshow": {
       "slide_type": "-"
      }
     },
     "source": [
      "A crucial feature of the Julia language is that the **syntax itself** is just **implemented in the language** just like any other type (Int, Char, ...). Its type is *Expr*."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "cmd = :(x = mean(rand(10)))\n",
      "typeof(cmd)"
     ],
     "language": "python",
     "metadata": {
      "slideshow": {
       "slide_type": "-"
      }
     },
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 44,
       "text": [
        "Expr"
       ]
      }
     ],
     "prompt_number": 44
    },
    {
     "cell_type": "markdown",
     "metadata": {
      "slideshow": {
       "slide_type": "-"
      }
     },
     "source": [
      "As with any other type, you can access its fields, which are:"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "names(cmd)"
     ],
     "language": "python",
     "metadata": {
      "slideshow": {
       "slide_type": "-"
      }
     },
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 45,
       "text": [
        "3-element Array{Symbol,1}:\n",
        " :head\n",
        " :args\n",
        " :typ "
       ]
      }
     ],
     "prompt_number": 45
    },
    {
     "cell_type": "markdown",
     "metadata": {
      "slideshow": {
       "slide_type": "subslide"
      }
     },
     "source": [
      "Hence, you can find the operation in the *:head* field, and its arguments in the *:args* field."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "cmd.head"
     ],
     "language": "python",
     "metadata": {
      "slideshow": {
       "slide_type": "-"
      }
     },
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 46,
       "text": [
        ":(=)"
       ]
      }
     ],
     "prompt_number": 46
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "cmd.args"
     ],
     "language": "python",
     "metadata": {
      "slideshow": {
       "slide_type": "-"
      }
     },
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 47,
       "text": [
        "2-element Array{Any,1}:\n",
        " :x               \n",
        " :(mean(rand(10)))"
       ]
      }
     ],
     "prompt_number": 47
    },
    {
     "cell_type": "heading",
     "level": 2,
     "metadata": {
      "slideshow": {
       "slide_type": "slide"
      }
     },
     "source": [
      "Example application: bootstrap macro"
     ]
    },
    {
     "cell_type": "markdown",
     "metadata": {
      "slideshow": {
       "slide_type": "-"
      }
     },
     "source": [
      "Using macros and other metaprogramming capabilities, some quite complicated applications can be implemented very concisely. As an example, we now want to implement a macro called *bootstrap*. For any given Julia function call that evaluates some statistics for some given data sample, the macro shall **re-calculate the same statistics for a given number of times with bootstrapped data**."
     ]
    },
    {
     "cell_type": "markdown",
     "metadata": {
      "slideshow": {
       "slide_type": "subslide"
      }
     },
     "source": [
      "To make the steps a little bit more obvious, let's see step by step, how a given command can be decomposed into the necessary parts."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "expr = :(mu = mean(x))"
     ],
     "language": "python",
     "metadata": {
      "slideshow": {
       "slide_type": "-"
      }
     },
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 48,
       "text": [
        ":(mu = mean(x))"
       ]
      }
     ],
     "prompt_number": 48
    },
    {
     "cell_type": "markdown",
     "metadata": {
      "slideshow": {
       "slide_type": "-"
      }
     },
     "source": [
      "At the top level, the command is an assignment."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "expr.head"
     ],
     "language": "python",
     "metadata": {
      "slideshow": {
       "slide_type": "-"
      }
     },
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 49,
       "text": [
        ":(=)"
       ]
      }
     ],
     "prompt_number": 49
    },
    {
     "cell_type": "markdown",
     "metadata": {
      "slideshow": {
       "slide_type": "subslide"
      }
     },
     "source": [
      "The left hand of the assignment can be accessed as follows:"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "expr.args[1]"
     ],
     "language": "python",
     "metadata": {
      "slideshow": {
       "slide_type": "-"
      }
     },
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 50,
       "text": [
        ":mu"
       ]
      }
     ],
     "prompt_number": 50
    },
    {
     "cell_type": "markdown",
     "metadata": {
      "slideshow": {
       "slide_type": "-"
      }
     },
     "source": [
      "And the right hand is the complete function call:"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "expr.args[2]"
     ],
     "language": "python",
     "metadata": {
      "slideshow": {
       "slide_type": "-"
      }
     },
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 51,
       "text": [
        ":(mean(x))"
       ]
      }
     ],
     "prompt_number": 51
    },
    {
     "cell_type": "markdown",
     "metadata": {
      "slideshow": {
       "slide_type": "subslide"
      }
     },
     "source": [
      "Again, this can be decomposed into the function that is called,"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "expr.args[2].args[1]"
     ],
     "language": "python",
     "metadata": {
      "slideshow": {
       "slide_type": "-"
      }
     },
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 52,
       "text": [
        ":mean"
       ]
      }
     ],
     "prompt_number": 52
    },
    {
     "cell_type": "markdown",
     "metadata": {
      "slideshow": {
       "slide_type": "-"
      }
     },
     "source": [
      "and the name of the data variable that needs to be resampled:"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "expr.args[2].args[2]"
     ],
     "language": "python",
     "metadata": {
      "slideshow": {
       "slide_type": "-"
      }
     },
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 53,
       "text": [
        ":x"
       ]
      }
     ],
     "prompt_number": 53
    },
    {
     "cell_type": "markdown",
     "metadata": {
      "slideshow": {
       "slide_type": "subslide"
      }
     },
     "source": [
      "Hence, we now could **isolate both the sample data and the function** that calculates the required statistics. We can then apply the same function to bootstrapped data samples."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "macro bootstrap(nTimes, expr)\n",
      "    quote\n",
      "        # get real value\n",
      "        $(esc(expr))\n",
      "\n",
      "        # get function to resample\n",
      "        func = $(expr.args[2].args[1])\n",
      "\n",
      "        # get data as first argument to function\n",
      "        data = $(expr.args[2].args[2])\n",
      "        nObs = length(data)\n",
      "        bootstrVals = Array(Any, $nTimes)\n",
      "        for ii=1:$nTimes\n",
      "            sampInd = rand(1:nObs, nObs)\n",
      "            samp = data[sampInd]\n",
      "        \n",
      "            # apply function to sample\n",
      "            bootstrVals[ii] = func(samp)\n",
      "        end\n",
      "        res = bootstrVals\n",
      "    end\n",
      "end"
     ],
     "language": "python",
     "metadata": {
      "slideshow": {
       "slide_type": "-"
      }
     },
     "outputs": [],
     "prompt_number": 54
    },
    {
     "cell_type": "markdown",
     "metadata": {
      "slideshow": {
       "slide_type": "subslide"
      }
     },
     "source": [
      "As we can see, the bootstrap macro works:"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "macroexpand(:(@bootstrap 1500000 mu = mean(x)))"
     ],
     "language": "python",
     "metadata": {
      "slideshow": {
       "slide_type": "-"
      }
     },
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 55,
       "text": [
        ":(begin  # In[54], line 4:\n",
        "        mu = mean(x) # line 7:\n",
        "        #345#func = mean # line 10:\n",
        "        #346#data = x # line 11:\n",
        "        #347#nObs = length(#346#data) # line 12:\n",
        "        #348#bootstrVals = Array(Any,1500000) # line 13:\n",
        "        for #349#ii = 1:1500000 # line 14:\n",
        "            #350#sampInd = rand(1:#347#nObs,#347#nObs) # line 15:\n",
        "            #351#samp = #346#data[#350#sampInd] # line 18:\n",
        "            #348#bootstrVals[#349#ii] = #345#func(#351#samp)\n",
        "        end # line 20:\n",
        "        #352#res = #348#bootstrVals\n",
        "    end)"
       ]
      }
     ],
     "prompt_number": 55
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "x = rand(200)\n",
      "muBstr = @bootstrap 150000 mu = mean(x)\n",
      "mu"
     ],
     "language": "python",
     "metadata": {
      "slideshow": {
       "slide_type": "subslide"
      }
     },
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 56,
       "text": [
        "0.4757593875222346"
       ]
      }
     ],
     "prompt_number": 56
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "muBstr"
     ],
     "language": "python",
     "metadata": {
      "slideshow": {
       "slide_type": "-"
      }
     },
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 57,
       "text": [
        "150000-element Array{Any,1}:\n",
        " 0.504205\n",
        " 0.498192\n",
        " 0.53112 \n",
        " 0.455686\n",
        " 0.496437\n",
        " 0.47852 \n",
        " 0.481194\n",
        " 0.511155\n",
        " 0.471694\n",
        " 0.476503\n",
        " 0.456777\n",
        " 0.482696\n",
        " 0.433231\n",
        " \u22ee       \n",
        " 0.516148\n",
        " 0.459374\n",
        " 0.48191 \n",
        " 0.469308\n",
        " 0.47288 \n",
        " 0.489942\n",
        " 0.474989\n",
        " 0.500121\n",
        " 0.471123\n",
        " 0.485724\n",
        " 0.461284\n",
        " 0.521403"
       ]
      }
     ],
     "prompt_number": 57
    },
    {
     "cell_type": "markdown",
     "metadata": {
      "slideshow": {
       "slide_type": "subslide"
      }
     },
     "source": [
      "Although the bootstrap macro only allows functions with only one argument, its reach can easily be extended through the use of anonymous functions."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "varNineFive = x -> quantile(x, 0.95)\n",
      "VaR_btstr = @bootstrap 150 VaR = varNineFive(x)"
     ],
     "language": "python",
     "metadata": {
      "slideshow": {
       "slide_type": "-"
      }
     },
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 58,
       "text": [
        "150-element Array{Any,1}:\n",
        " 0.968494\n",
        " 0.925306\n",
        " 0.979651\n",
        " 0.868595\n",
        " 0.965734\n",
        " 0.949601\n",
        " 0.968485\n",
        " 0.949544\n",
        " 0.914124\n",
        " 0.951439\n",
        " 0.951439\n",
        " 0.951439\n",
        " 0.950686\n",
        " \u22ee       \n",
        " 0.965734\n",
        " 0.949601\n",
        " 0.968485\n",
        " 0.949601\n",
        " 0.977965\n",
        " 0.949544\n",
        " 0.920363\n",
        " 0.920135\n",
        " 0.949544\n",
        " 0.967986\n",
        " 0.898065\n",
        " 0.949601"
       ]
      }
     ],
     "prompt_number": 58
    }
   ],
   "metadata": {}
  }
 ]
}